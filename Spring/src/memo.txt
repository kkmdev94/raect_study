정적 컨텐츠
그냥 파일을 그대로 내려준다. body의 값이 그냥 그대로 다 출력이 된다.

MVC와 템플릿 엔진을 모델뷰 컨트롤러 방식으로 쪼개서 뷰에서 템플릿 엔진으로 html을 렌더링 된것을 클라이언트에게 전달해준다.
즉, 예제의 mvc를 호출해서 소스를 보면 ${name}의 값처럼 프로그래밍을 통해 전달된 값을 출력하도록 렌더링 된것을 제외하고는 html 소스같은것은 다 볼 수 있다.

API

@ResponseBody // -> HTML의 body가 아니라 HTTP에서 header 부와 body부가 있는데 여기서 body 부에 데이터를 내가 직접 넣어주겠다는 뜻

즉 현재 예제에서 진행하는것처럼 서버를 실행시키고 url에서 localhost를 통해 접속시 Request 요청에다가 입력할때

hello-string?name=spring 이라고 입력을 하면 화면에 hello spring이 출력이 되지만 이전 @ResponseBody 어노테이션이 없을때와는 다르게

소스보기를 하면 html 소스가 없이 바로 해당 데이터 값만 보인다.


json 구조로 넘어가면 서 key:value로 값이 넘어간다.

작동 원리에 대해서는
@ResponseBody 어노테이션이 있으면

클라이언트 요청 -> 내장 톰캣 서버에서 스프링 부트로 던져줌 -> 여기서 ResponseBody가 있다면 기존에는 뷰 리졸버가 동작했지만 여기서는 http Message Converter가 동작을 한다.

문자였으면 StringConverter가 동작하여 단순하게 예제 hello-spring처럼 문자만 던져주면 되지만 return 값이 객체라면 JSON 컨버터가 디폴트 값으로 지정되어 있어 JSON 컨버터가 작동한다.

그래서 JSON 스타일로 변경하는데 예제 객체에서 name이 key이고 그 name의 값을 던져준 값이 있으므로 value에는 해당 값이 들어가 {"name":"spring"} JSON 형태의 Key:Value값이 완성되어

값을 반환하는 것이다.

=====================================================================================================================================================================
TDD
Test케이스를 먼져 만들고 그 다음 구현 클래스를 만드는것을 의미한다.
