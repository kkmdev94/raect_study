빅오 표기법
빅오(Big O) 알고리즘 성능 분석에서 사용하는 수학적 표기법

알고리즘이 처리할 데이터의 양이 증가할 때, 얼마나 빠르게 실행되는지를 나타낸다.
이 알고리즘은 정확한 실행 시간 계산이 아닌, 데이터 양의 증가에 따른 성능의 변화 추세를 이해하는 것이다.

빅오 표기법의 예시
O(1) - 상수 시간 : 입력 데이터의 크기에 관계없이 알고리즘 실행 시간이 일정하다
    예) 배열에서 인덱스를 사용하는 경우.(배열에서는 몇건의 데이터가 있던 인덱스를 이용하여 꺼내는 순간 단 한번의 연산으로 가능하다. / 연산 공식은 배열의 특징1번에서 표기)

O(n) - 선형 시간 : 알고리즘의 실행 시간이 입력 데이터의 크기에 비례하여 증가.
    예) 배열의 검색, 배열의 모든 요소를 순회하는 경우 (하나씩 다 뒤져야하는 경우)

O(n²) - 제곱 시간 : 알고리즘의 실행 시간이 입력 데이터의 크기의 제곱에 비례하여 증가
    예1) n²은 n * n을 의미
    예2) 이중 루프를 사용하는 알고리즘에서 발생

O(log n) - 로그 시간 : 알고리즘의 실행 시간이 데이터 크기의 로그에 비례하여 증가
    예1) 이진 탐색

O(n log n) - 선형 로그 시간:
    예) 많은 효율적인 정렬 알고리즘들.

매우 큰 데이터를 입력한다고 가정하고, 데이터 양 증가에 따른 성능의 변화추세를 비교하는데 사용한다.
정확한 성능을 측정하는 것이 목표가 아닌 대략적인 추세를 비교하는것이 목적이다.
데이터가 많이 들어오면 추세를 보는데 상수는 크게 의미가 없어진다.
이래서 빅오 표기법에서는 상수를 제거한다. 예를 들면 O(n + 2) , O(n/2)도 모두 O(n)으로 표기한다.

빅오 표기법은 별도의 이야기가 없다면 최악을 항상 가정해서 표기한다. 표기법에는 총 3개가 있다
    - 최적의 경우 : 배열의 첫번째 항목에서 바로 값을 찾으면 O(1)
    - 최악의 경우 : 마지막 항목에 있거나 항목이 없는 경우에는 전체를 순회한다. O(n)
    - 보통의 경우 : 중간쯤 데이터를 발견한 경우. 이 경우 O(n/2)가 되지만 상수를 제외하여 O(n)으로 표기, 최악과의 비교를 위해 O(n/2)로 하기도 한다.

배열은 인덱스를 사용하면 데이터 양과 상관없이 한번에 결과를 찾기에 O(1)이 된다.