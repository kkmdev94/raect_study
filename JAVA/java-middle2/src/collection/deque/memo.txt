
-- Stack (스택)
넣는곳과 뺴는곳이 같다.
push : 블록을 넣는다. 1->2->3 순서로 블럭을 넣었다.
pop : 3->2->1 마지막에 넣은 블록부터 빠진다.

즉 스택은 후입 선출(LIFO, Last In First Out), 나중에 넣은 것이 먼저 나오는 것을 후입 선출이라 하고, 이러한 자료 구조를 스택이라고 한다.
전통적으로 스택에 값을 넣는것을 push라 하고, 스택에서 값을 꺼내는 것을 pop 이라고 한다.

Stack 클래스는 사용하지 말자.
이유 : Stack 클래스 내부에서 Vector라는 자료 구조를 사용하는데 이 자료 구조는 매우 오래되어서 지금은 사용되지 않고 하위 호환을 위해 존재한다.
따라서 Vector를 사용하는 Stack도 사용하지 않는 것을 권장하며, Stack 자료 구조를 사용하고 싶다면 Deque를 사용하자.


------------------------------------------------------------------------------------------------------------------------------

-- Queue (큐)
offer : 블록을 넣는다. 1->2->3 순서로 블럭을 넣고
poll : 블록을 꺼낸다. 이때 먼저 들어간 1->2->3 순서대로 나온다.

선입 선출(FIFO, First In First Out), 스택과는 반대로 가장 먼저 넣은것이 가장 먼저 나오는 것을 선입 선출이라 하며, 이러한 자료 구조를 큐(Queue)라 한다.
전통적으로 큐에 값을 넣는 것을 offer라 하고, 큐에서 값을 꺼내는 것을 poll이라 한다.

큐는 컬랙션의 자식이다. 큐의 대표적인 구현체는 ArrayDeque, LinkedList가 있다.

--------------------------------------------------------------------------------------------------------------------------------

-- Dequq (데크)
Dequq = Double Ended Queue의 약자로 양쪽 끝에서 요소를 추가하거나 제거할 수 있는 자료 구조이다.
일반적인 Dequq(데크)는 큐와 스택의 기능을 모두 포함하고 있어 매우 유연한 자료 구조이다.
데크 혹은 덱 등으로 불리운다.

offerFirst() : 앞에 추가한다.
OfferLas() : 뒤에 추가한다.
pollFirst() : 앞에서 꺼낸다.
pollLas() : 뒤에서 꺼낸다.

앞에서 넣고 앞에서 꺼내면 스택이되고, 앞에서 넣고 뒤에서 꺼내면 큐가 된다.
대표적으로 ArrayDeque, LinkedList가 있다.
