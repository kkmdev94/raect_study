1. 절차 지향 프로그래밍
    이름 그대로 절차 순서 즉, 실행 순서를 중요하게 생각하는 방식
    프로그램의 흐름을 순차적으로 따르며 처리하는 방식. 즉, "어떻게"를 중심으로 프로그래밍 한다.

2. 객체 지향 프로그래밍
    이름 그대로 객체를 지향한다. 객체를 중요하게 생각하는 방식
    실제 세계의 사물이나 사건을 객체로 보고, 이러한 객체들 간의 상호작용을 중심으로 프로그래밍하는 방식. 즉, "무엇을" 중심으로 프로그래밍

둘의 차이
    절차 지향은 데이터와 해당 데이터에 대한 처리 방식이 분리되어 있다. 반면 객체 지향에서는 데이터와 그 데이터에 대한 행동(메서드)이 하나의 '객체'안에 함께 포함되어 있다.

지금까지 우리가 작성한 모든 프로그램은 절차 지향 프로그램이다.

절차 지향 -> 객체 지향으로 점진적으로 코드를 변경해보면서 학습을 한다.


모듈화 :
    쉽게 이야기 하면 레고 블럭을 생각하면 된다. 필요한 블럭을 가져다 꼽아 사용할 수 있다.
    예제에서는 음악 플레이어의 필요한 기능을 메서드 호출 만으로 손쉽게 이용하였다 = 모듈화
    음악 플레이어와 관련된 메서드를 조립해서 프로그램을 작성 할 수 있다.

절차 지향의 한계
클래스로 데이터를 하나로 묶고, 메서드를 이용해 기능을 각각 모듈화 했다. 하지만 더 개선을 할 수 없을까?
우리가 작성한 절차 지향의 한계는 데이터와 기능이 분리되어 있다는 것. 음악 플레이어의 데이터는 MusicPlayerData에 있는데, 기능은 MusicPlayerMain3에 있는 각각의 메서드에 분리되어 있다.

그래서 관련 데이터는 MusicPlayerData를, 관련 기능은 MusicPlayerMain3에서 각 메서드를 이용해야된다.

데이터와 그 기능은 매우 밀접하다. 각 메서드를 보면 MusicPlayerData의 데이터를 사용한다. 그래서 이후 데이터가 변경되면 MusicPlayerMain3의 메서드들도 함께 변경되어야 하고
이러면은 유지보수 관점에서도 관리 포인트가 2곳으로 늘어난다. 하지만 객체 지향 프로그래밍이 나오면서 데이터와 기능을 묶어서 사용할 수 있게 되었다.
