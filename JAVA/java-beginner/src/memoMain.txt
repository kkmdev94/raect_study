자바 메모리 구조 - JVM이 아래의 메모리 구조를 가지고 동작한다.

메서드 영역 : 클래스 정보를 보관한다. 붕어빵 틀
    1. 프로그램을 싱행하는데 필요한 공통 데이터를 관리. 이 영역은 프로그램의 모든 영역에 공유
        - 클래스 정보 : 클래스의 실행 코드(바이트 코드), 필드, 메서드와 생성자 코드등 모든 실행 코드 존재
        - static 영역 : static 변수 보관
        - 런타임 상수 풀 : 프로그램을 실행하는데 필요한 공통 리터럴 상수 보관 / 효율적으로 프로그램을 관리하기 위한 상수들을 관리

스택 영역 : 실제 프로그램이 실행되는 영역, 메서드를 실행할 때 마다 하나씩 쌓인다.
    1. 자바 실행 시, 하나의 실행 스택이 생성, 각 스택 프레임은 지역 변수, 중간 연산 결과, 메서드 호출 정보 등을 포함
        -스택 프레임 : 스택 영역에 쌓이는 네모 박스가 하나의 스택 프레임 / 메소드 호출시 하나씩 스택 프레임이 쌓이며 메서드 종료 시 해당 스택 프레임이 제거
                    호출 할때 마다 순차적으로 쌓인다.(제일 처음 실행되는 메인메서드가 제일 아래)

힙 영역 : 객체(인스턴스)가 생성되는 영역. new 명령어를 사용하면 이영역을 사용, 쉽게 이야기해서 붕어빵 틀로부터 생성된 붕어빵이 존재하는 공간 배열도 이 영역이다(배열도 new를 사용하기 떄문에)
    1. 객체(인스턴스)와 배열이 생성되는 영역 / 가비지 컬렉션(GC)이 이루어지는 주요 영역이며, 더 이상 참조되지 않는 객체는 GC에 의해 제거

    ※ 스택 영역은 더 정확히는 각 쓰레드별로 하나의 실행 스택이 생성 / 쓰레드 수 만큼 스택 영역이 생성 / 지금은 쓰레드 1개만 사용하기에 스택 영역도 1개이다 (멀티 쓰레드는 추후)

메서드 코드는 메서드 영역에
인스턴스는 1개도 100개도 생성 가능, 같은 클래스로 생성된 객체라도 인스턴스 내부의 변수 값은 서로 다를 수 있다.
하지만 메서드는 공통된 코드를 공유한다. 따라서 객체 생성시 인스턴스 변수는 메모리가 할당 되지만 메서드에 대한 새로운 메모리 할당은 없다.
메서드는 메서드 영역에서 공통으로 관리/실행 된다. 그래서 인스턴스의 메서드를 호출하면 실제로는 메서드 영역에 있는 코드를 불러서 수행한다.

ex) 이전에 만든 name, price, quantity를 생각해보자 new Item으로 객체를 2개를 만들엇다.
이때 new Item으로 만든 객체는 각자의 x001 / x002라는 각자의 변수 값을 가지고 메모리를 할당 받지만 그 안에 있는 내용을 호출하기위해 사용하는 getName같은 메서드는 새로운 메모리 할당을 받을 필요없이
메서드 영역에서 관리되면서 인스턴스 객체 메서드 영역에 있는 코드를 호출해와서 수행하는 것이다.

스택 - 냉장고를 떠올리면 편하다.
후입 선출(LIFO, Last In First Out)
위로만 뚜껑이 열려있고 1번부터 블럭을 쌓으면 1 -> 2 -> 3 순서대로 들어가고 나올때는 3 -> 2 -> 1 순으로 나중에 넣은 것이 가장 먼저 나오는 것을 후입 선출이라 한다. 이런 자료 구조를 스택이라 한다.

큐
선입 선출(FIFO, First In First Out)
후입 선출과 반대, 가장 먼저 넣은것이 먼저 나오는 것을 선입 선출이라 한다. 이런 자료 구조를 큐라 한다.