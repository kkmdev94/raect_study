임계 영역(critical section)
- 여러 스레드가 동시에 접근하면 데이터 불일치나 예상치 못한 동작이 발생 할 수 있는 위험하고 또 중요한 코드 부분
- 여러 스레드가 동시에 접근해서는 안되는 공유 자원을 접근하거나 수정하는 부분을 의미
    ex)  공유 변수나 공유 객체를 수정

앞서 우리가 살펴본 출금() 로직이 바로 임계 영역이다.
더 자세히는 출금을 진행할 때 잔액(balance)을 검증하는 단계부터 잔액의 계산을 완료할 때 까지가 임계 영역이다.
여기서 balance는 여러 스레드가 동시에 접근해서는 안되는 공유 자원인다.

즉, 하나의 스레드가 작업을 완료하고 공유 변수나 공유 객체의 값을 변경 후 그 다음 스레드가 변경된 값을 확인하고 검증을 해야한다는 것이다.

문제와 풀이 하루에 하나씩이여도 좋으니 무조건 풀어보기

Synchronized 단점

무한대기 : BLOCKED 상태의 스레드는 락이 풀릴 때 까지 무한 대기
    - 특정 시간까지만 대기하는 타임아웃X
    - 중간에 인터럽트 X
공정성 : 락이 돌아왔을 때 BLOCKED 상태의 여러 스레드 중 어떤 스레드가 락을 얻을 지 모른다.

자바 1.5 부터 concurrent라는 동시성 문제 해결을 위한 패키지가 추가됨.

참고로 단순하고 편리하게 사용하기에는 synchronized가 좋으므로, 목적에 부합한다면 synchronized를 사용하면 된다.