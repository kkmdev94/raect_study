메서드를 호출할 때는 메서드에 넘기는 값과 매개변수(파라미터)의 타입이 맞아야 한다. 물론 넘기는 값과 매개변수(파라미터)의 순서와 갯수도 맞아야 한다.

호출 : call("hello", 20) -> 첫번째는 문자 , 두번째는 숫자
메서드의 정의 : int call(String str, int age) -> 여기도 첫번째는 문자, 두번째는 숫자

이렇게 매개변수의 타입과 순서가 다 맞아야 한다 메서드 선언에서 String과 int 순으로 선언해 놓고
call(20, "hello") 이런식으로 순서가 바뀌거나 / call("hello), "20") 이런식으로 타입이 변경되면 안된다.

인수(Argument)  -> 호출자에서 넘기는 값
여기서 "hello", 20 처럼 넘기는 값을 영어로 Argument(아규먼트) 한글로 인수 또는 인자라 한다.
실무에서는 아규먼트,인수,인자라는 용어를 모두 사용한다.

매개변수(Parameter)
메서드를 정의할 때 선언한 변수인 String str, int age를 매개변수, 파라미터라 한다.
메서드를 호출할 때 인수를 넘기면, 그 인수가 매개변수에 대입된다.
실무에서는 매개변수, 파라미터 용어를 모두 사용한다.

인수라는 용어는 '인'과'수'의 합성어로, '들어가는 수'라는 의미를 가진다. 즉, 메서드 내부로 들어가는 값을 의미한다. 인자도 같은 의미이다.

매개변수,parameter는 '매개'와'변수'의 합성어로, '중간에서 전달하는 변수'라는 의미를 가진다. 즉, 메서드 호출부와 메서드 내부 사이에서 값을 전달하는 역할을 하는 변수라는 뜻이다.

************************* 아주 중요 ***************************
자바의 아주 중요한 대원칙

- 자바는 항상 변수의 값을 복사해서 대입한다 -

그리고 메서드의 반환타입에 대해서 이해가 좀 부족한 것 같다 관련되서 조금이 아니라 많이 공부를 좀 해야될 것 같다.


------------------------------------------------------------------------------------------------------------------------------------------------
메서드 오버로딩

add(int a, int b)
add(int a, int b, int c)
add(double a, double b)

위 로직처럼 매서드의 이름이 같고 매개변수가 다른 메서드를 여러개 정의하는 것을 메서드 오버로딩(Overloading)이라 한다 오버 로딩은 같은 이름의 메서드를 여러개 정의했다고 이해하면 된다

오버로딩 규칙
메서드의 이름이 같아도 매개 변수의 타입 및 순서가 다르면 오버로딩을 할 수 있다. 하지만 매개변수가 아닌 반환 타입이 다른것은 인정하지 않아 컴파일 오류가 발생한다
// 예시

int add(int a, int b)
double add(int a, int b)

위 예시처럼 반환 타입이 다를 경우 인정되지 않는다.

메서드 시그니처 = 메서드 이름 + 매개변수 타입(순서)
메서드 시그니처는 자바에서 메서드를 구분할 수 있는 고유한 식별자나 서명을 뜻한다. 메서드의 이름과 매개변수 타입(순서 포함)으로 메서드를 구분할 수 있는 기준이라고 보면 된다.
메서드 오버로딩에서 설명한 것 처럼 메서드 이름이 같아도 메서드 시그니처가 다르면 다른 메서드로 간주한다.

하지만 반환 타입은 시그니처에 포함되지 않는다. 오버로딩이 실패한 위의 예시코드를 보면 두 메서드는 add(int a, int b)로 메서드 시그니처가 같다.
따라서 메서드의 구분이 불가능 해서 컴파일 오류가 발생한다. // 이게 무슨소리냐면 시그니처같은 경우 변수의 이름에는 상관 없이 매개변수 타입과 순서를 보고 구분한다.

이런 형식도 안된다.
int add(int a, int b)
int add(int c, int d)

이 로직도 안된다. 변수 명이 아닌 매개변수의 타입을 보기때문에 add의 int와 int가 동일하므로 시그니처가 동일하다고 보아서 오류가 발생한다.